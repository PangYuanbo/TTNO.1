0. 当前是 react + vite 项目，全局默认使用 nextui 和 tailwindcss，所有代码基于这两个 ui 库，不要额外引入其他库。所有的code全部写在一个HTML里面，包括JS和其他的code。
1. 如果我要你重构或重新设计或新增页面的ui，你需要把变得更加有条理和ui现代化，减少阴影的使用，并且基于 framer-motion 编写动画效果，让页面灵动，现在的ui太像五年前的bootstrap了，跟不上时代，可以参考shadcn nextui 这类现代ui库的实现。
2. 如果使用tailwindcss配色，在k线和涨跌幅涉及到金融数据的方案中绿色统一使用 teal-700 dark:teal-400 红色统一使用 rose-700 dark: rose-400，默认light情况下不要着色。项目的默认dark模式下，强调色是 sky-400. 按钮色使用 sky-700
3. 所有页面你都必须全方位考虑到适配黑色 dark 场景，包括不限于 text background shadow 等等。
4. 全局页面默认使用 dark 配色的场景进行着色，着色现代化。
5. nextui 没有 Text 组件，使用tailwindcss来实现。
6. 重构页面的时候要考虑到最佳实践，组件分组，独立模块，易于维护。
7. 程序使用 react-helmet-async 来处理标题页面描述等 seo 信息，你需要基于这个库进行检查修改优化新增，来达到搜索引擎友好。
8. 项目是一个专业的金融量化网站，提供量化指标信息，专业的量化交易平台，用户可以一键管理部署策略机器人，查看回测等，你需要根据这个项目背景来做进一步的网站交互设计优化，文案优化，文案等要对标华尔街的知名券商基金等公司文案。
9. 图标库只使用 @egoist/tailwindcss-icons，不要引入其他任何图标库，使用方式类似于 <span class="i-mdi-home"></span>
10. 状态管理使用 jotai 库，使用状态管理的时候你需要独立出函数来方便调用优化维护，get请求库使用 swr，其他请求使用 axios，你需要把所有请求独立成model或者hooks方便调用，同时联动jotai管理数据状态。并且使用 vite env 来管理开发和生产环境的 VITE_APP_BACKEND_URL，你需要调用这个参数来作为头。并且代码需要符合ts
11. 使用 echarts-for-react 作为简单图表渲染，是echart的包装库。
12. 所有的工具类函数都必须要独立到 utils 文件夹下面然后再调用，避免面条代码。
13. 你需要完全遵守上面的每一条规则。
14. swr 的 fetcher 在 import fetcher from '@/http/fetcher'，不需要自己重写定义编写。
15. 所有接受传入参数的函数，都需要用 {} 对象的形式接入，而不是flat平铺直叙，这样方便人员调用和理解。
16. 使用 dayjs 来处理时间，不要使用 moment.js 或者其他库。
17. 除非让你重构，否则当你新增逻辑代码的时候，不要把老的已经正常运行的逻辑代码给覆盖了，而是要新增到老的逻辑代码后面，不要影响老的逻辑代码。
18. 创建文件夹的时候，需要嵌套分层，便于维护。
19. 当看起来是我让你修复 bug 的场景下，你询问我是不是要执行修复 bug 模式，如果是，请按照下面四个步骤的提示词执行：
a. 日志追踪指令:请在关键位置添加带序号和时间戳的日志,帮我追踪 [具体功能] 的执行流程。每个日志需要包含:
- 序号(#1)标识顺序
- 时间戳
- 组件名
- 关键数据
让我们先只关注 [某个具体环节],其他暂时不用管。
b. 日志分析指令:我把日志贴给你,请帮我分析:
- 执行顺序是否正确
- 是否有异常的重复执行
- 关键数据是否符合预期
- 可能的问题点在哪里
c. 解决方案验证:这个修复方案可能会带来什么副作用?之前的类似修复是否已经解决了根本问题?我们需要考虑:
- 是否影响其他功能
- 是否引入新的问题
- 是否真正解决了根因
d. 渐进式修复:让我们一步一步来:
1. 先确认 [具体问题A] 
2. 修复后观察日志
3. 确认没问题再处理 [问题B]
4. 每一步都要验证是否引入新问题